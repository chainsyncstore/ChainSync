name: ChainSync Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
            force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    services:
      # Set up PostgreSQL service for testing
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: chaintest
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      # Set up Redis for testing
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Set up environment variables
        run: |
          echo "DATABASE_URL=postgres://postgres:postgres@localhost:5432/chaintest" >> .env.test
          echo "REDIS_URL=redis://localhost:6379" >> .env.test
          echo "NODE_ENV=test" >> .env.test
          echo "JWT_SECRET=test-secret-key" >> .env.test
          echo "ENCRYPTION_KEY=test-encryption-key-32-chars-long" >> .env.test
      
      - name: Run TypeScript type checking
        run: npm run type-check
      
      - name: Run linting
        run: npm run lint
      
      - name: Run unit tests
        run: npm run test:unit
        env:
          NODE_ENV: test
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/chaintest
          REDIS_URL: redis://localhost:6379
      
      - name: Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/chaintest
          REDIS_URL: redis://localhost:6379
      
      - name: Run E2E tests
        run: npm run test:e2e
        env:
          NODE_ENV: test
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/chaintest
          REDIS_URL: redis://localhost:6379
        continue-on-error: ${{ inputs.force_deploy }}
      
      - name: Run security tests
        run: npm run test:security
        env:
          NODE_ENV: test
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/chaintest
          REDIS_URL: redis://localhost:6379
        continue-on-error: ${{ inputs.force_deploy }}
      
      - name: Build application
        run: npm run build
      
      - name: Generate deployment manifest
        run: |
          cat > deployment-manifest.json << EOF
          {
            "version": "${{ github.sha }}",
            "buildTime": "${{ github.event.head_commit.timestamp }}",
            "commitMessage": "${{ github.event.head_commit.message }}",
            "author": "${{ github.event.head_commit.author.name }}",
            "branch": "${{ github.ref_name }}",
            "workflowRunId": "${{ github.run_id }}"
          }
          EOF
      
      # Archive build artifacts for deployment
      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist
            public
            package.json
            package-lock.json
            deployment-manifest.json
          retention-days: 30
  
  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: always() && (needs.build-and-test.result == 'success' || inputs.force_deploy == 'true')
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install dependencies
        run: npm ci
      
      # Run npm audit to check for vulnerabilities
      - name: Check for vulnerabilities
        run: npm audit --production
        continue-on-error: true
      
      # Run OWASP Dependency-Check
      - name: OWASP Dependency-Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'ChainSync'
          path: '.'
          format: 'HTML'
          args: >
            --failOnCVSS 7
            --enableExperimental
        continue-on-error: true
      
      # Upload security scan results as an artifact
      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: ${{ github.workspace }}/reports
          retention-days: 90

  build-docker:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: always() && (needs.build-and-test.result == 'success' || inputs.force_deploy == 'true')
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Upload Docker image info
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-info
          path: |
            ${{ steps.meta.outputs.tags }}
            ${{ steps.meta.outputs.labels }}
          retention-days: 30

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-docker]
    if: always() && (needs.build-docker.result == 'success' || inputs.force_deploy == 'true')
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install production dependencies
        run: npm ci --only=production
      
      - name: Deploy to staging
        id: deploy
        run: |
          echo "Deploying to staging environment..."
          # This would integrate with your actual deployment platform
          # For now, we'll simulate the deployment
          echo "url=https://staging.chainsync.example.com" >> $GITHUB_OUTPUT
          echo "deployment_id=staging-${{ github.run_id }}" >> $GITHUB_OUTPUT
      
      - name: Run post-deployment health checks
        run: |
          echo "Running health checks..."
          # Add your health check logic here
          sleep 30
          echo "Health checks completed"
      
      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Staging deployment successful"
          else
            echo "❌ Staging deployment failed"
          fi

  deploy-production:
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.event.inputs.environment == 'production' && needs.deploy-staging.result == 'success'
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install production dependencies
        run: npm ci --only=production
      
      - name: Pre-deployment validation
        run: |
          echo "Running pre-deployment validation..."
          # Add validation logic here
          echo "Validation completed"
      
      - name: Deploy to production
        id: deploy
        run: |
          echo "Deploying to production environment..."
          # This would integrate with your actual deployment platform
          # For now, we'll simulate the deployment
          echo "url=https://chainsync.example.com" >> $GITHUB_OUTPUT
          echo "deployment_id=prod-${{ github.run_id }}" >> $GITHUB_OUTPUT
      
      - name: Run post-deployment health checks
        run: |
          echo "Running production health checks..."
          # Add your health check logic here
          sleep 60
          echo "Production health checks completed"
      
      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Production deployment successful"
          else
            echo "❌ Production deployment failed"
          fi

  rollback:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: needs.deploy-production.result == 'failure'
    environment:
      name: production
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Rollback to previous version
        run: |
          echo "Rolling back to previous version..."
          # Add rollback logic here
          echo "Rollback completed"
      
      - name: Verify rollback
        run: |
          echo "Verifying rollback..."
          # Add verification logic here
          echo "Rollback verification completed"
      
      - name: Notify rollback status
        run: |
          echo "🔄 Production rollback completed"

  deployment-monitoring:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup monitoring
        run: |
          echo "Setting up deployment monitoring..."
          # Add monitoring setup logic here
      
      - name: Monitor deployment metrics
        run: |
          echo "Monitoring deployment metrics..."
          # Add metrics collection logic here
      
      - name: Generate deployment report
        run: |
          echo "Generating deployment report..."
          # Add report generation logic here
      
      - name: Upload deployment report
        uses: actions/upload-artifact@v4
        with:
          name: deployment-report
          path: deployment-report.json
          retention-days: 90
